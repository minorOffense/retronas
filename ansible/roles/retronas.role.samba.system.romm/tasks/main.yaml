

- name: "{{ my_name }} - build layout list (set fact) (top level paths)"
  ansible.builtin.set_fact:
    path_list: "{{ path_list|default([]) + [ 'mkdir -p \"' + retronas_path + '/' + system_key + '/' + item.1.name + '/' + item.0[system_key] + '\";' ] }}"
  loop: "{{ system_map|product(top_level_paths)|list }}"
  when: top_level_paths is defined and
        item.1.enabled is true and
        item.0[system_key] is defined and
        item.0[system_key] | length > 0 and
        item.1.systems is true

- name: "{{ my_name }} - build layout list (set fact)"
  ansible.builtin.set_fact:
    path_list: "{{ path_list|default([]) + [ 'mkdir -p \"' + retronas_path + '/' + system_key + '/' + item[system_key] + '\";' ] }}"
  loop: "{{ system_map }}"
  when: top_level_paths is not defined and
        item[system_key] is defined and
        item[system_key] | length > 0

- name: "{{ my_name }} - build internal directory layout with top level paths"
  ansible.builtin.file:
    path: "{{ retronas_path }}/{{ system_key }}/{{ item.1.name }}/{{ item.0.dest }}"
    owner: "{{ retronas_user }}"
    group: "{{ retronas_group }}"
    state: directory
  loop: "{{ internal_symlinks|product(top_level_paths)|list }}"
  when: internal_symlinks is defined and
        top_level_path is defined

- name: "{{ my_name }} - build internal directory layout"
  ansible.builtin.file:
    path: "{{ retronas_path }}/{{ system_key }}/{{ item.dest }}"
    owner: "{{ retronas_user }}"
    group: "{{ retronas_group }}"
    state: directory
  loop: "{{ internal_symlinks }}"
  when: internal_symlinks is defined and
        top_level_path is not defined
